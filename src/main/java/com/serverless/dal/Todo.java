package com.serverless.dal;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import org.apache.log4j.Logger;

import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapperConfig;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBQueryExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBRangeKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedQueryList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;

@DynamoDBTable(tableName = "PLACEHOLDER_TODOS_TABLE_NAME")
public class Todo {

	private static final String TODOS_TABLE_NAME = System.getenv("TODOS_TABLE_NAME");

	private static DynamoDBAdapter db_adapter;
	private final AmazonDynamoDB client;
	private final DynamoDBMapper mapper;

	private Logger logger = Logger.getLogger(this.getClass());

	private String id;
	private String name;
	private String status;

	@DynamoDBHashKey(attributeName = "id")
	@DynamoDBAutoGeneratedKey
	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	@DynamoDBRangeKey(attributeName = "name")
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@DynamoDBRangeKey(attributeName = "status")
	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public Todo() {
		DynamoDBMapperConfig mapperConfig = DynamoDBMapperConfig.builder()
				.withTableNameOverride(new DynamoDBMapperConfig.TableNameOverride(TODOS_TABLE_NAME)).build();
		Todo.db_adapter = DynamoDBAdapter.getInstance();
		this.client = Todo.db_adapter.getDbClient();
		this.mapper = Todo.db_adapter.createDbMapper(mapperConfig);
	}

	public String toString() {
		return String.format("Todo [id=%s, name=%s, status=$%f]", this.id, this.name, this.status);
	}

	public Boolean ifTableExists() {
		return this.client.describeTable(TODOS_TABLE_NAME).getTable().getTableStatus().equals("ACTIVE");
	}

	public List<Todo> list() throws IOException {
		DynamoDBScanExpression scanExp = new DynamoDBScanExpression();
		List<Todo> results = this.mapper.scan(Todo.class, scanExp);
		for (Todo p : results) {
			logger.info("Todos - list(): " + p.toString());
		}
		return results;
	}

	public Todo get(String id) throws IOException {
		Todo todo = null;

		HashMap<String, AttributeValue> av = new HashMap<String, AttributeValue>();
		av.put(":v1", new AttributeValue().withS(id));

		DynamoDBQueryExpression<Todo> queryExp = new DynamoDBQueryExpression<Todo>()
				.withKeyConditionExpression("id = :v1").withExpressionAttributeValues(av);

		PaginatedQueryList<Todo> result = this.mapper.query(Todo.class, queryExp);
		if (result.size() > 0) {
			todo = result.get(0);
			logger.info("Todo - get(): todo - " + todo.toString());
		} else {
			logger.info("Todo - get(): todo - Not Found.");
		}
		return todo;
	}

	public void save() throws IOException {
		logger.info("Todo - save(): " + this.toString());
		this.mapper.save(this);
	}

	public Boolean delete(String id) throws IOException {
		Todo todo = get(id);
		if (todo != null) {
			logger.info("Todos - delete(): " + todo.toString());
			this.mapper.delete(todo);
		} else {
			logger.info("Todos - delete(): todo - does not exist.");
			return false;
		}
		return true;
	}

}
